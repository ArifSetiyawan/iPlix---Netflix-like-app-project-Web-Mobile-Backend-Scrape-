{"ast":null,"code":"var _jsxFileName = \"/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/src/auth/components/registerForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Button, FormControl } from \"react-bootstrap\"; // FIELD VALIDATION\n\nvar required = function required(value) {\n  return value ? undefined : 'Required!';\n};\n\nvar minLength = function minLength(min) {\n  return function (value) {\n    return value && value.length < min ? \"Must be \".concat(min, \" character or more\") : undefined;\n  };\n};\n\nvar email = function email(value) {\n  return value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Invalid email address!' : undefined;\n}; // FIELD FORM\n\n\nvar renderField = function renderField(_ref) {\n  var input = _ref.input,\n      label = _ref.label,\n      type = _ref.type,\n      _ref$meta = _ref.meta,\n      touched = _ref$meta.touched,\n      error = _ref$meta.error;\n  return React.createElement(\"div\", {\n    style: {\n      marginBottom: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    style: {\n      fontWeight: \"bold\",\n      color: \"red\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, error), React.createElement(FormControl, Object.assign({}, input, {\n    placeholder: label,\n    type: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })));\n};\n\nvar RegisterForm = function RegisterForm(props) {\n  var handleSubmit = props.handleSubmit,\n      submitting = props.submitting;\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      marginTop: 50,\n      marginBottom: 50\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"username\",\n    type: \"text\",\n    component: renderField,\n    label: \"Username\",\n    validate: [required, minLength(3)],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"email\",\n    type: \"email\",\n    component: renderField,\n    label: \"Email\",\n    validate: [email, required],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"name\",\n    type: \"text\",\n    component: renderField,\n    label: \"Name\",\n    validate: [required, minLength(3)],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"password\",\n    type: \"password\",\n    component: renderField,\n    label: \"Password\",\n    validate: [required, minLength(6)],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    disabled: submitting,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Submit\")));\n};\n\nexport default reduxForm({\n  form: 'RegisterForm' // a unique identifier for this form\n\n})(RegisterForm);","map":{"version":3,"sources":["/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/src/auth/components/registerForm.js"],"names":["React","Field","reduxForm","Button","FormControl","required","value","undefined","minLength","min","length","email","test","renderField","input","label","type","meta","touched","error","marginBottom","fontWeight","color","RegisterForm","props","handleSubmit","submitting","marginTop","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { Button, FormControl } from \"react-bootstrap\";\n\n// FIELD VALIDATION\nconst required = value => value ? undefined : 'Required!';\nconst minLength = min => value =>\nvalue && value.length < min ? `Must be ${min} character or more` : undefined;\nconst email = value =>\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\n        'Invalid email address!' : undefined;\n\n// FIELD FORM\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\n    <div style={{ marginBottom: 10 }}>\n        {/* <div> */}\n        {/* <label style={{ fontWeight: \"bold\" }}>{label}:</label> */}\n        {/* </div> */}\n            {touched && ((error && <span style={{ fontWeight: \"bold\", color: \"red\" }}>{error}</span>))}\n            <FormControl {...input} placeholder={label} type={type} />\n    </div>\n)\n\nconst RegisterForm = (props) => {\n    const { handleSubmit, submitting } = props\n    return (\n        <form onSubmit={handleSubmit} style={{ marginTop: 50, marginBottom: 50 }}>\n            <Field name=\"username\" type=\"text\"\n                component={renderField} label=\"Username\"\n                validate={[required, minLength(3)]}\n            />\n            <Field name=\"email\" type=\"email\"\n                component={renderField} label=\"Email\"\n                validate={[email, required]}\n            />\n            <Field name=\"name\" type=\"text\"\n                component={renderField} label=\"Name\"\n                validate={[required, minLength(3)]}\n            />\n            <Field name=\"password\" type=\"password\"\n                component={renderField} label=\"Password\"\n                validate={[required, minLength(6)]}\n            />\n            <div style={{ marginTop: 10 }}>\n                <Button type=\"submit\" disabled={submitting} color=\"primary\" >Submit</Button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm({\n    form: 'RegisterForm' // a unique identifier for this form\n})(RegisterForm)"]},"metadata":{},"sourceType":"module"}